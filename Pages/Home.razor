@page "/"

<PageTitle>Random Pattern Selector</PageTitle>

<RadzenStack Orientation="Orientation.Vertical">
		<RadzenText Text="Randomly picks ITF patterns for training. Supports selecting multiple rounds" TextStyle="Radzen.Blazor.TextStyle.Body1" TagName="Radzen.Blazor.TagName.Auto" class="mt-4" Style="font-size: 20px; line-height: 24px"></RadzenText>
		<RadzenRow AlignItems="AlignItems.Center">
			<RadzenLabel Text="Competitor rank: " Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle" />
			<RadzenSelectBar @bind-Value="@rank" Name="RankSelection" TextProperty="Text" ValueProperty="Value" Data="@ITFPatterns.ranks" Size="ButtonSize.Small" Class="rz-display-none rz-display-xl-flex" />
			<RadzenDropDown @bind-Value="@rank" Name="RankSelection" Data="@ITFPatterns.ranks" Class="rz-display-flex rz-display-xl-none" />
		</RadzenRow>
		<RadzenRow>
			<RadzenCheckBox @bind-Value="saju" Name="SajuCheckbox" />
			<RadzenLabel Text="Include Saju-Jirigi & Saju-Maki" Component="SajuCheckbox" Style="margin-right: 8px; vertical-align: middle;" />
		</RadzenRow>
		<RadzenRow>
		<RadzenCheckBox @bind-Value="addTwoPatterns" Name="AddTwoPatternsCheckbox" @bind-Value:after="Reset" />
			<RadzenLabel Text="World Championships mode" Component="AddTwoPatternsCheckbox" Style="margin-right: 8px; vertical-align: middle;" />
		</RadzenRow>
		<RadzenRow>
			<RadzenButton Click="@SelectPattern" Text="Add Pattern" ButtonStyle="ButtonStyle.Primary" />
			<RadzenButton Click="@Reset" Text="Reset" ButtonStyle="ButtonStyle.Danger" />
		</RadzenRow>
		<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" FlexWrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-4 rz-mb-6">
			<RadzenTimeline Orientation="Orientation.Vertical" LinePosition="LinePosition.Center" Style="min-width: 300px">
				<Items>
					@foreach (var pattern in selectedPatterns)
					{
						<RadzenTimelineItem PointStyle="PointStyle.Primary">
							 <LabelContent>
							<RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0 rz-color-primary">@(pattern.Label)</RadzenText>
						</LabelContent>
							<ChildContent>
								@(pattern.Pattern)
							</ChildContent>
						</RadzenTimelineItem>
					}
				</Items>
			</RadzenTimeline>
		</RadzenStack>

</RadzenStack>


@code {

	private string rank = "1st Dan";
	bool saju = false;
	bool addTwoPatterns = false;

	List<SelectedPattern> selectedPatterns = new List<SelectedPattern>();


	Random rnd = new Random();

	// TODO: GitHub project creation


	private void SelectPattern()
	{
		int arrayStart = saju ? 0 : 2;
		int i = 0;
		const int MAX_ITERATIONS = 100;

		int selectedRank = Array.IndexOf(ITFPatterns.ranks, rank) + 1;

		var rankPatterns = ITFPatterns.GetRankPatterns(selectedRank);
		var possiblePatterns = ITFPatterns.GetPatternsList(selectedRank);



		// if we're in World Championship selection mode, we totally can have more than 1 pattern in the selection list
		if (addTwoPatterns)
		{
			SelectedPattern newPattern1 = new SelectedPattern();
			SelectedPattern newPattern2 = new SelectedPattern();
			int roundCount = selectedPatterns.Count / 2 + 1;


			newPattern1.Label = $"Round {roundCount}";
			newPattern1.Pattern = rankPatterns[rnd.Next(0, rankPatterns.Count)];

			selectedPatterns.Add(newPattern1);

			newPattern2.Label = "";
			newPattern2.Pattern = possiblePatterns[rnd.Next(arrayStart, possiblePatterns.Count)];

			selectedPatterns.Add(newPattern2);

			return;
		}
		else
		{
			// do nothing if we have already selected all patterns
			if (selectedPatterns.Count >= possiblePatterns.Count - arrayStart)
				return;

			string newPatternName = "";

			// select a new pattern - but don't select one that we have already selected
			while (i < MAX_ITERATIONS)
			{
				newPatternName = possiblePatterns[rnd.Next(arrayStart, possiblePatterns.Count)];
				if (!selectedPatterns.Exists(x => x.Pattern == newPatternName))
				{
					var newPattern = new SelectedPattern()
						{
							Label = (selectedPatterns.Count + 1).ToString(),
							Pattern = newPatternName
						};

					selectedPatterns.Add(newPattern);
					return;
				}

				i++;
			}

			throw new Exception("Logic exception - could not select a new pattern");

		}
	}

	private void Reset()
	{
		selectedPatterns.Clear();
	}

	private void TwoPatternCheckbox(bool newValue)
	{
		selectedPatterns.Clear();
	}
}