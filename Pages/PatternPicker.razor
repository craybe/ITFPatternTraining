@page "/PatternPicker"
@page "/"
@inject PatternSelectorState patternSelectorState


<PageTitle>Pattern Picker</PageTitle>

<RadzenStack Orientation="Orientation.Vertical">
	<RadzenText Text="Randomly picks ITF patterns for competition, according to ITF Spain rules. Supports selecting multiple rounds." TextStyle="Radzen.Blazor.TextStyle.Body1" TagName="Radzen.Blazor.TagName.Auto"></RadzenText>
		<RadzenRow AlignItems="AlignItems.Normal">
			<RadzenSelectBar @bind-Value="@(patternSelectorState.Rank)" Name="RankSelection" TextProperty="Text" ValueProperty="Value" Data="@ITFPatterns.ranks" Size="ButtonSize.Small" Class="rz-display-none rz-display-xl-flex" />
			<RadzenDropDown @bind-Value="@(patternSelectorState.Rank)" Name="RankSelection" Data="@ITFPatterns.ranks" Class="rz-display-flex rz-display-xl-none" />
		</RadzenRow>
		<RadzenRow>
		<RadzenCheckBox @bind-Value="patternSelectorState.AddTwoPatterns" Name="AddTwoPatternsCheckbox" @bind-Value:after="Reset" />
			<RadzenLabel Text="World Championships mode" Component="AddTwoPatternsCheckbox" Style="margin-right: 8px; vertical-align: middle;" />
		</RadzenRow>
		<RadzenRow>
		<RadzenButton Click="@SelectPattern" Text="Pick Pattern" ButtonStyle="ButtonStyle.Primary" class="disable-dbl-tap-zoom" Icon="add" />
			<RadzenButton Click="@Reset" Text="Reset" ButtonStyle="ButtonStyle.Danger" class="disable-dbl-tap-zoom" />
		</RadzenRow>
		<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" FlexWrap="FlexWrap.Wrap" Gap="1rem" Class="rz-p-4 rz-mb-6">
			<RadzenTimeline Orientation="Orientation.Vertical" LinePosition="LinePosition.Center" Style="min-width: 300px">
				<Items>
					@foreach (var pattern in patternSelectorState.SelectedPatterns)
					{
						<RadzenTimelineItem PointStyle="PointStyle.Primary">
							 <LabelContent>
							<RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0 rz-color-primary">@(pattern.Label)</RadzenText>
						</LabelContent>
							<ChildContent>
								@(pattern.Pattern)
							</ChildContent>
						</RadzenTimelineItem>
					}
				</Items>
			</RadzenTimeline>
		</RadzenStack>

</RadzenStack>


@code {

	private Random rnd = new Random();


	private void SelectPattern()
	{
		int selectedRank = Array.IndexOf(ITFPatterns.ranks, patternSelectorState.Rank) + 1;

		List<string> rankPatterns = ITFPatterns.GetRankPatterns(selectedRank);
		List<string> possiblePatterns = ITFPatterns.GetPatternsList(selectedRank);



		// if we're in World Championship selection mode, we totally can have more than 1 pattern in the selection list
		if (patternSelectorState.AddTwoPatterns)
		{
			SelectedPattern newPattern1 = new SelectedPattern();
			SelectedPattern newPattern2 = new SelectedPattern();
			int roundCount = patternSelectorState.SelectedPatterns.Count / 2 + 1;


			newPattern1.Label = $"Round {roundCount}";
			newPattern1.Pattern = rankPatterns[rnd.Next(0, rankPatterns.Count)];

			patternSelectorState.SelectedPatterns.Add(newPattern1);

			// now, remove that pattern from the list of possible ones
			possiblePatterns.Remove(newPattern1.Pattern);

			newPattern2.Label = "";
			newPattern2.Pattern = possiblePatterns[rnd.Next(0, possiblePatterns.Count)];

			patternSelectorState.SelectedPatterns.Add(newPattern2);
		}
		else
		{
			// remove the patterns we have already selected from the list of possible ones
			var p = possiblePatterns.Except<string>(patternSelectorState.SelectedPatterns.Select<SelectedPattern, string>((p, s) => p.Pattern)).ToList();

			// do nothing if we have already selected all patterns
			if (p.Count() == 0)
				return;

			string newPatternName = "";

			// select a new pattern - but don't select one that we have already selected
			newPatternName = p[rnd.Next(0, p.Count())];
			patternSelectorState.SelectedPatterns.Add(new SelectedPattern()
				{
					Label = (patternSelectorState.SelectedPatterns.Count + 1).ToString(),
					Pattern = newPatternName
				}
			);
		}
	}

	private void Reset()
	{
		patternSelectorState.SelectedPatterns.Clear();
	}

	private void TwoPatternCheckbox(bool newValue)
	{
		patternSelectorState.SelectedPatterns.Clear();
	}
}